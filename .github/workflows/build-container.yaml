name: Build Container

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  
  schedule:
    # Patch Tuesday (Second Tuesday of the month)
    - cron: "0 7 8-14 * 2"

jobs:
  build-container:
    strategy:
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-24.04-arm
        include:
          - os: ubuntu-24.04
            arch: amd64
          - os: ubuntu-24.04-arm
            arch: arm64
    name: Build Container Image
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          fetch-tags: 'true'

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            suffix=-${{ matrix.arch }}
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}.{{minor}}.{{patch}}

      - name: Build SELinux files
        run: |
          sudo apt install -y make
          cd selinux
          make all

      - name: Buildah Build
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: Containerfile
          tags: ${{ steps.meta.outputs.tags || steps.meta_pr.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels || steps.meta_pr.outputs.labels }}

      - name: Push image
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Trigger other builds
        if: github.ref_name == github.event.repository.default_branch
        env:
          repo_owner: ${{ github.repository_owner }}
          token: ${{ secrets.TRIGGER_PAT }}
        run: |
          chmod +x scripts/trigger_builds/trigger_builds.sh
          ./scripts/trigger_builds/trigger_builds.sh

  combine-tags:
    name: Combine Tags
    runs-on: ubuntu-24.04
    needs: build-container
    permissions:
      packages: write
    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}.{{minor}}.{{patch}}

      - name: Pull image
        run: |
          for tag in ${{ steps.meta.outputs.tags }}
          do
            echo "Pulling ${tag}-amd64"
            podman pull ${tag}-amd64
            echo "Pulling ${tag}-arm64"
            podman pull ${tag}-arm64
          done

      - name: Generate manifest
        run: |
          for tag in ${{ steps.meta.outputs.tags }}
          do
            podman manifest create ${tag}
            podman manifest add ${tag} \
              docker://${tag}-amd64 \
              --arch amd64
            podman manifest add ${tag} \
              docker://${tag}-arm64 \
              --arch arm64
          done
      - name: Push manifest
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ghcr.io/${{ github.repository }}
          tags: ${{ steps.meta.outputs.tags }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

  make-raw:
    name: Create Raw Image
    strategy:
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-24.04-arm
        include:
          - os: ubuntu-24.04
            arch: amd64
          - os: ubuntu-24.04-arm
            arch: arm64
    runs-on: ${{ matrix.os }}
    needs: build-container
    permissions:
      actions: write
      packages: write
    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}.{{minor}}.{{patch}}

      - name: Pull image
        run: |
          tag=$(echo "${{ steps.meta.outputs.tags }}" | awk '{print $1}')
          echo "Pulling ${tag}-${{ matrix.arch }}"
          sudo podman pull ${tag}-${{ matrix.arch }}

      - name: Create Image
        run: |
          set -euxo pipefail
          mkdir -p output
          tag=$(echo "${{ steps.meta.outputs.tags }}" | awk '{print $1}')
          rootfs=xfs
          bootfs=ext4
          truncate -s 5G output/${{ matrix.arch }}.raw
          parted output/${{ matrix.arch }}.raw mklabel msdos
          parted output/${{ matrix.arch }}.raw mkpart primary fat16 9MiB 501MiB
          parted output/${{ matrix.arch }}.raw set 1 boot on
          parted output/${{ matrix.arch }}.raw mkpart primary ${bootfs} 510MiB 1GiB
          parted output/${{ matrix.arch }}.raw mkpart primary ${rootfs} 1534MB 100%
          parted output/${{ matrix.arch }}.raw print
          disk=$(sudo losetup --show -P -f output/${{ matrix.arch }}.raw)
          sudo mkfs.vfat -F 32 ${disk}p1
          sudo mkfs.${bootfs} ${disk}p2
          sudo mkfs.${rootfs} -L root ${disk}p3
          sudo mkdir -p /mnt/root
          sudo mount ${disk}p3 /mnt/root
          sudo mkdir /mnt/root/boot
          sudo mount ${disk}p2 /mnt/root/boot
          sudo mkdir /mnt/root/boot/efi
          sudo mount ${disk}p1 /mnt/root/boot/efi
          sudo podman run \
            --rm \
            --privileged \
            --pid=host \
            --security-opt label=type:unconfined_t \
            -v /dev:/dev \
            -v /var/lib/containers:/var/lib/containers \
            -v /mnt/root:/output \
            ${tag}-${{ matrix.arch }} \
            bootc install to-filesystem \
              --generic-image \
              --target-transport containers-storage \
              --target-imgref ${tag} \
              /output
          sudo umount /mnt/root/boot/efi
          sudo umount /mnt/root/boot
          sudo umount /mnt/root
          sudo losetup -d ${disk}
          echo "Compressing image..."
          xz -vz -T0 output/${{ matrix.arch }}.raw

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: output-image-${{ matrix.arch }}
          path: output/*.raw.xz
